---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for creating compliance dashboards and reporting infrastructure'

Parameters:
  ComplianceEvidentBucket:
    Type: String
    Description: Name of the S3 bucket to store compliance evidence and reports
    Default: compliance-evidence
  
  NotificationEmail:
    Type: String
    Description: Email address to receive compliance notifications and reports
    Default: your-email@example.com
  
  ReportSchedule:
    Type: String
    Description: Schedule expression for compliance report generation
    Default: cron(0 8 ? * MON *)
    AllowedPattern: cron\(([^\)]*)\)
  
  DashboardName:
    Type: String
    Description: Name of the CloudWatch dashboard
    Default: ComplianceDashboard

Resources:
  # SNS Topic for compliance notifications and reports
  ComplianceNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Compliance Notifications
      TopicName: compliance-notifications

  ComplianceNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref ComplianceNotificationTopic

  # IAM Role for Lambda functions
  ComplianceDashboardRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ComplianceDashboardPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:DescribeComplianceByConfigRule
                  - config:DescribeComplianceByResource
                  - config:GetComplianceDetailsByConfigRule
                  - config:GetComplianceDetailsByResource
                  - config:ListDiscoveredResources
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetDashboard
                  - cloudwatch:PutDashboard
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - sns:Publish
                Resource: '*'

  # Lambda function to collect compliance metrics and update dashboard
  ComplianceMetricsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt ComplianceDashboardRole.Arn
      Runtime: python3.12
      Timeout: 300
      Environment:
        Variables:
          DASHBOARD_NAME: !Ref DashboardName
          EVIDENCE_BUCKET: !Ref ComplianceEvidentBucket
          SNS_TOPIC_ARN: !Ref ComplianceNotificationTopic
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import datetime
          import logging
          from collections import defaultdict

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize clients
          config_client = boto3.client('config')
          cloudwatch_client = boto3.client('cloudwatch')
          s3_client = boto3.client('s3')
          sns_client = boto3.client('sns')

          # Get environment variables
          DASHBOARD_NAME = os.environ.get('DASHBOARD_NAME', 'ComplianceDashboard')
          EVIDENCE_BUCKET = os.environ.get('EVIDENCE_BUCKET', '')
          SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN', '')

          def lambda_handler(event, context):
              """
              Main handler function for collecting compliance metrics and updating dashboard.
              """
              try:
                  # Collect compliance metrics
                  compliance_data = collect_compliance_metrics()
                  
                  # Update CloudWatch dashboard
                  update_dashboard(compliance_data)
                  
                  # Store compliance data as evidence
                  store_compliance_evidence(compliance_data)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Compliance dashboard updated successfully')
                  }
              except Exception as e:
                  logger.error(f"Error updating compliance dashboard: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error: {str(e)}")
                  }

          def collect_compliance_metrics():
              """
              Collect compliance metrics from AWS Config.
              """
              # Get all AWS Config rules
              rules_response = config_client.describe_config_rules()
              rules = rules_response['ConfigRules']
              
              # Initialize compliance data structure
              compliance_data = {
                  'timestamp': datetime.datetime.now().isoformat(),
                  'overall_compliance': {
                      'COMPLIANT': 0,
                      'NON_COMPLIANT': 0,
                      'NOT_APPLICABLE': 0
                  },
                  'rules_compliance': {},
                  'resource_type_compliance': defaultdict(lambda: {
                      'COMPLIANT': 0,
                      'NON_COMPLIANT': 0,
                      'NOT_APPLICABLE': 0,
                      'total': 0
                  }),
                  'non_compliant_resources': []
              }
              
              # Process each rule
              for rule in rules:
                  rule_name = rule['ConfigRuleName']
                  
                  # Get compliance details for the rule
                  compliance_response = config_client.describe_compliance_by_config_rule(
                      ConfigRuleNames=[rule_name]
                  )
                  
                  # Initialize rule compliance
                  compliance_data['rules_compliance'][rule_name] = {
                      'COMPLIANT': 0,
                      'NON_COMPLIANT': 0,
                      'NOT_APPLICABLE': 0
                  }
                  
                  # Process compliance results
                  for result in compliance_response.get('ComplianceByConfigRules', []):
                      compliance_type = result.get('Compliance', {}).get('ComplianceType', 'NOT_APPLICABLE')
                      compliance_data['rules_compliance'][rule_name][compliance_type] += 1
                      compliance_data['overall_compliance'][compliance_type] += 1
                      
                      # If non-compliant, get the non-compliant resources
                      if compliance_type == 'NON_COMPLIANT':
                          non_compliant_resources = get_non_compliant_resources(rule_name)
                          
                          # Add to the list of non-compliant resources
                          compliance_data['non_compliant_resources'].extend(non_compliant_resources)
                          
                          # Update resource type compliance
                          for resource in non_compliant_resources:
                              resource_type = resource.get('resourceType', 'Unknown')
                              compliance_data['resource_type_compliance'][resource_type]['NON_COMPLIANT'] += 1
                              compliance_data['resource_type_compliance'][resource_type]['total'] += 1
              
              # Convert defaultdict to regular dict for JSON serialization
              compliance_data['resource_type_compliance'] = dict(compliance_data['resource_type_compliance'])
              
              # Put metrics to CloudWatch
              put_compliance_metrics(compliance_data)
              
              return compliance_data

          def get_non_compliant_resources(rule_name):
              """
              Get non-compliant resources for a specific rule.
              """
              non_compliant_resources = []
              
              try:
                  # Get compliance details by config rule
                  response = config_client.get_compliance_details_by_config_rule(
                      ConfigRuleName=rule_name,
                      ComplianceTypes=['NON_COMPLIANT']
                  )
                  
                  for evaluation in response.get('EvaluationResults', []):
                      resource_id = evaluation.get('EvaluationResultIdentifier', {}).get('EvaluationResultQualifier', {}).get('ResourceId', '')
                      resource_type = evaluation.get('EvaluationResultIdentifier', {}).get('EvaluationResultQualifier', {}).get('ResourceType', '')
                      
                      if resource_id and resource_type:
                          non_compliant_resources.append({
                              'resourceId': resource_id,
                              'resourceType': resource_type,
                              'ruleName': rule_name
                          })
              except Exception as e:
                  logger.error(f"Error getting non-compliant resources for rule {rule_name}: {str(e)}")
              
              return non_compliant_resources

          def put_compliance_metrics(compliance_data):
              """
              Put compliance metrics to CloudWatch.
              """
              timestamp = datetime.datetime.now()
              
              # Overall compliance metrics
              cloudwatch_client.put_metric_data(
                  Namespace='ComplianceMetrics',
                  MetricData=[
                      {
                          'MetricName': 'CompliantResources',
                          'Value': compliance_data['overall_compliance']['COMPLIANT'],
                          'Unit': 'Count',
                          'Timestamp': timestamp
                      },
                      {
                          'MetricName': 'NonCompliantResources',
                          'Value': compliance_data['overall_compliance']['NON_COMPLIANT'],
                          'Unit': 'Count',
                          'Timestamp': timestamp
                      },
                      {
                          'MetricName': 'NotApplicableResources',
                          'Value': compliance_data['overall_compliance']['NOT_APPLICABLE'],
                          'Unit': 'Count',
                          'Timestamp': timestamp
                      }
                  ]
              )
              
              # Rule-specific metrics
              for rule_name, compliance in compliance_data['rules_compliance'].items():
                  cloudwatch_client.put_metric_data(
                      Namespace='ComplianceMetrics/Rules',
                      MetricData=[
                          {
                              'MetricName': 'NonCompliantResources',
                              'Value': compliance['NON_COMPLIANT'],
                              'Unit': 'Count',
                              'Timestamp': timestamp,
                              'Dimensions': [
                                  {
                                      'Name': 'RuleName',
                                      'Value': rule_name
                                  }
                              ]
                          }
                      ]
                  )
              
              # Resource type metrics
              for resource_type, compliance in compliance_data['resource_type_compliance'].items():
                  cloudwatch_client.put_metric_data(
                      Namespace='ComplianceMetrics/ResourceTypes',
                      MetricData=[
                          {
                              'MetricName': 'NonCompliantResources',
                              'Value': compliance['NON_COMPLIANT'],
                              'Unit': 'Count',
                              'Timestamp': timestamp,
                              'Dimensions': [
                                  {
                                      'Name': 'ResourceType',
                                      'Value': resource_type
                                  }
                              ]
                          }
                      ]
                  )

          def update_dashboard(compliance_data):
              """
              Update the CloudWatch dashboard with compliance metrics.
              """
              # Create dashboard widgets
              widgets = []
              
              # Overall compliance widget
              widgets.append({
                  'type': 'metric',
                  'width': 12,
                  'height': 6,
                  'properties': {
                      'metrics': [
                          ['ComplianceMetrics', 'CompliantResources'],
                          ['ComplianceMetrics', 'NonCompliantResources'],
                          ['ComplianceMetrics', 'NotApplicableResources']
                      ],
                      'view': 'timeSeries',
                      'stacked': False,
                      'region': boto3.session.Session().region_name,
                      'title': 'Overall Compliance Status',
                      'period': 300
                  }
              })
              
              # Compliance by rule widget
              rule_metrics = []
              for rule_name in compliance_data['rules_compliance'].keys():
                  rule_metrics.append(['ComplianceMetrics/Rules', 'NonCompliantResources', 'RuleName', rule_name])
              
              if rule_metrics:
                  widgets.append({
                      'type': 'metric',
                      'width': 12,
                      'height': 6,
                      'properties': {
                          'metrics': rule_metrics,
                          'view': 'timeSeries',
                          'stacked': False,
                          'region': boto3.session.Session().region_name,
                          'title': 'Non-Compliant Resources by Rule',
                          'period': 300
                      }
                  })
              
              # Compliance by resource type widget
              resource_type_metrics = []
              for resource_type in compliance_data['resource_type_compliance'].keys():
                  resource_type_metrics.append(['ComplianceMetrics/ResourceTypes', 'NonCompliantResources', 'ResourceType', resource_type])
              
              if resource_type_metrics:
                  widgets.append({
                      'type': 'metric',
                      'width': 12,
                      'height': 6,
                      'properties': {
                          'metrics': resource_type_metrics,
                          'view': 'timeSeries',
                          'stacked': False,
                          'region': boto3.session.Session().region_name,
                          'title': 'Non-Compliant Resources by Type',
                          'period': 300
                      }
                  })
              
              # Non-compliant resources text widget
              non_compliant_text = "# Non-Compliant Resources\n\n"
              non_compliant_text += "| Resource ID | Resource Type | Rule Name |\n"
              non_compliant_text += "|------------|---------------|----------|\n"
              
              for resource in compliance_data['non_compliant_resources'][:20]:  # Limit to 20 resources to avoid dashboard size limits
                  non_compliant_text += f"| {resource['resourceId']} | {resource['resourceType']} | {resource['ruleName']} |\n"
              
              if len(compliance_data['non_compliant_resources']) > 20:
                  non_compliant_text += f"\n*Showing 20 of {len(compliance_data['non_compliant_resources'])} non-compliant resources*"
              
              widgets.append({
                  'type': 'text',
                  'width': 24,
                  'height': 6,
                  'properties': {
                      'markdown': non_compliant_text
                  }
              })
              
              # Create dashboard JSON
              dashboard_body = {
                  'widgets': widgets
              }
              
              # Update the dashboard
              cloudwatch_client.put_dashboard(
                  DashboardName=DASHBOARD_NAME,
                  DashboardBody=json.dumps(dashboard_body)
              )
              
              logger.info(f"Dashboard {DASHBOARD_NAME} updated successfully")

          def store_compliance_evidence(compliance_data):
              """
              Store compliance data as evidence in S3.
              """
              if not EVIDENCE_BUCKET:
                  logger.info("No evidence bucket specified, skipping evidence storage")
                  return
              
              try:
                  # Format timestamp for the filename
                  timestamp = datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')
                  
                  # Create the evidence file
                  evidence_key = f"compliance-evidence/metrics/{timestamp}.json"
                  
                  # Upload to S3
                  s3_client.put_object(
                      Bucket=EVIDENCE_BUCKET,
                      Key=evidence_key,
                      Body=json.dumps(compliance_data, default=str),
                      ContentType='application/json',
                      ServerSideEncryption='AES256'
                  )
                  
                  logger.info(f"Compliance evidence saved to s3://{EVIDENCE_BUCKET}/{evidence_key}")
                  
                  # Send notification if SNS topic is configured
                  if SNS_TOPIC_ARN:
                      message = f"""
          COMPLIANCE METRICS UPDATE

          Timestamp: {compliance_data['timestamp']}

          Overall Compliance:
          - Compliant Resources: {compliance_data['overall_compliance']['COMPLIANT']}
          - Non-Compliant Resources: {compliance_data['overall_compliance']['NON_COMPLIANT']}
          - Not Applicable Resources: {compliance_data['overall_compliance']['NOT_APPLICABLE']}

          Non-Compliant Resource Count: {len(compliance_data['non_compliant_resources'])}

          Dashboard: https://{boto3.session.Session().region_name}.console.aws.amazon.com/cloudwatch/home?region={boto3.session.Session().region_name}#dashboards:name={DASHBOARD_NAME}
          Evidence: s3://{EVIDENCE_BUCKET}/{evidence_key}

          This is an automated message from the Compliance Metrics function.
                      """
                      
                      sns_client.publish(
                          TopicArn=SNS_TOPIC_ARN,
                          Subject=f"Compliance Metrics Update - {datetime.datetime.now().strftime('%Y-%m-%d')}",
                          Message=message
                      )
                      
                      logger.info(f"Notification sent to {SNS_TOPIC_ARN}")
              except Exception as e:
                  logger.error(f"Error storing compliance evidence: {str(e)}")

  # Lambda function to generate compliance reports
  ComplianceReportFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt ComplianceDashboardRole.Arn
      Runtime: python3.12
      Timeout: 300
      Environment:
        Variables:
          EVIDENCE_BUCKET: !Ref ComplianceEvidentBucket
          SNS_TOPIC_ARN: !Ref ComplianceNotificationTopic
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import datetime
          import logging
          import csv
          import io

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          # Initialize clients
          config_client = boto3.client('config')
          s3_client = boto3.client('s3')
          sns_client = boto3.client('sns')

          # Get environment variables
          EVIDENCE_BUCKET = os.environ.get('EVIDENCE_BUCKET', '')
          SNS_TOPIC_ARN = os.environ.get('SNS_TOPIC_ARN', '')

          def lambda_handler(event, context):
              """
              Main handler function for generating compliance reports.
              """
              try:
                  # Generate compliance report
                  report_data = generate_compliance_report()
                  
                  # Store report in S3
                  report_url = store_compliance_report(report_data)
                  
                  # Send notification
                  if SNS_TOPIC_ARN:
                      send_report_notification(report_data, report_url)
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Compliance report generated successfully')
                  }
              except Exception as e:
                  logger.error(f"Error generating compliance report: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error: {str(e)}")
                  }

          def generate_compliance_report():
              """
              Generate a comprehensive compliance report.
              """
              # Get all AWS Config rules
              rules_response = config_client.describe_config_rules()
              rules = rules_response['ConfigRules']
              
              # Initialize report data
              report_data = {
                  'timestamp': datetime.datetime.now().isoformat(),
                  'rules_summary': [],
                  'non_compliant_resources': []
              }
              
              # Process each rule
              for rule in rules:
                  rule_name = rule['ConfigRuleName']
                  rule_id = rule['ConfigRuleId']
                  
                  # Get compliance details for the rule
                  compliance_response = config_client.describe_compliance_by_config_rule(
                      ConfigRuleNames=[rule_name]
                  )
                  
                  # Initialize rule summary
                  rule_summary = {
                      'rule_name': rule_name,
                      'rule_id': rule_id,
                      'compliant_count': 0,
                      'non_compliant_count': 0,
                      'not_applicable_count': 0
                  }
                  
                  # Process compliance results
                  for result in compliance_response.get('ComplianceByConfigRules', []):
                      compliance_type = result.get('Compliance', {}).get('ComplianceType', 'NOT_APPLICABLE')
                      
                      if compliance_type == 'COMPLIANT':
                          rule_summary['compliant_count'] += 1
                      elif compliance_type == 'NON_COMPLIANT':
                          rule_summary['non_compliant_count'] += 1
                          
                          # Get non-compliant resources
                          non_compliant_resources = get_non_compliant_resources(rule_name)
                          report_data['non_compliant_resources'].extend(non_compliant_resources)
                      else:
                          rule_summary['not_applicable_count'] += 1
                  
                  report_data['rules_summary'].append(rule_summary)
              
              return report_data

          def get_non_compliant_resources(rule_name):
              """
              Get non-compliant resources for a specific rule.
              """
              non_compliant_resources = []
              
              try:
                  # Get compliance details by config rule
                  response = config_client.get_compliance_details_by_config_rule(
                      ConfigRuleName=rule_name,
                      ComplianceTypes=['NON_COMPLIANT']
                  )
                  
                  for evaluation in response.get('EvaluationResults', []):
                      resource_id = evaluation.get('EvaluationResultIdentifier', {}).get('EvaluationResultQualifier', {}).get('ResourceId', '')
                      resource_type = evaluation.get('EvaluationResultIdentifier', {}).get('EvaluationResultQualifier', {}).get('ResourceType', '')
                      
                      if resource_id and resource_type:
                          non_compliant_resources.append({
                              'resource_id': resource_id,
                              'resource_type': resource_type,
                              'rule_name': rule_name,
                              'annotation': evaluation.get('Annotation', '')
                          })
              except Exception as e:
                  logger.error(f"Error getting non-compliant resources for rule {rule_name}: {str(e)}")
              
              return non_compliant_resources

          def store_compliance_report(report_data):
              """
              Store compliance report in S3 and return the URL.
              """
              if not EVIDENCE_BUCKET:
                  logger.info("No evidence bucket specified, skipping report storage")
                  return None
              
              try:
                  # Format timestamp for the filename
                  timestamp = datetime.datetime.now().strftime('%Y-%m-%d')
                  
                  # Create JSON report
                  json_key = f"compliance-reports/json/{timestamp}-compliance-report.json"
                  s3_client.put_object(
                      Bucket=EVIDENCE_BUCKET,
                      Key=json_key,
                      Body=json.dumps(report_data, default=str),
                      ContentType='application/json',
                      ServerSideEncryption='AES256'
                  )
                  
                  # Create CSV report for non-compliant resources
                  csv_buffer = io.StringIO()
                  csv_writer = csv.writer(csv_buffer)
                  
                  # Write header
                  csv_writer.writerow(['Resource ID', 'Resource Type', 'Rule Name', 'Annotation'])
                  
                  # Write data
                  for resource in report_data['non_compliant_resources']:
                      csv_writer.writerow([
                          resource['resource_id'],
                          resource['resource_type'],
                          resource['rule_name'],
                          resource['annotation']
                      ])
                  
                  csv_key = f"compliance-reports/csv/{timestamp}-non-compliant-resources.csv"
                  s3_client.put_object(
                      Bucket=EVIDENCE_BUCKET,
                      Key=csv_key,
                      Body=csv_buffer.getvalue(),
                      ContentType='text/csv',
                      ServerSideEncryption='AES256'
                  )
                  
                  logger.info(f"Compliance reports saved to S3: {json_key} and {csv_key}")
                  
                  # Generate pre-signed URL for the CSV report (valid for 7 days)
                  csv_url = s3_client.generate_presigned_url(
                      'get_object',
                      Params={
                          'Bucket': EVIDENCE_BUCKET,
                          'Key': csv_key
                      },
                      ExpiresIn=604800  # 7 days in seconds
                  )
                  
                  return csv_url
              except Exception as e:
                  logger.error(f"Error storing compliance report: {str(e)}")
                  return None

          def send_report_notification(report_data, report_url):
              """
              Send notification about the compliance report.
              """
              try:
                  # Calculate compliance statistics
                  total_rules = len(report_data['rules_summary'])
                  compliant_rules = sum(1 for rule in report_data['rules_summary'] if rule['non_compliant_count'] == 0)
                  non_compliant_resources_count = len(report_data['non_compliant_resources'])
                  
                  # Format the message
                  message = f"""
          COMPLIANCE REPORT - {datetime.datetime.now().strftime('%Y-%m-%d')}

          Summary:
          - Total Rules: {total_rules}
          - Compliant Rules: {compliant_rules}
          - Non-Compliant Rules: {total_rules - compliant_rules}
          - Non-Compliant Resources: {non_compliant_resources_count}

          Top Non-Compliant Resources:
          """
                  
                  # Add top 10 non-compliant resources
                  for i, resource in enumerate(report_data['non_compliant_resources'][:10]):
                      message += f"{i+1}. {resource['resource_type']} - {resource['resource_id']} - {resource['rule_name']}\n"
                  
                  if non_compliant_resources_count > 10:
                      message += f"\n... and {non_compliant_resources_count - 10} more non-compliant resources.\n"
                  
                  # Add report URL
                  if report_url:
                      message += f"\nDownload full report: {report_url}\n"
                  
                  message += "\nThis is an automated message from the Compliance Report function."
                  
                  # Send the notification
                  sns_client.publish(
                      TopicArn=SNS_TOPIC_ARN,
                      Subject=f"Compliance Report - {datetime.datetime.now().strftime('%Y-%m-%d')}",
                      Message=message
                  )
                  
                  logger.info(f"Report notification sent to {SNS_TOPIC_ARN}")
              except Exception as e:
                  logger.error(f"Error sending report notification: {str(e)}")

  # EventBridge rule to trigger metrics collection
  ComplianceMetricsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger compliance metrics collection
      ScheduleExpression: rate(1 hour)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ComplianceMetricsFunction.Arn
          Id: ComplianceMetricsFunction

  ComplianceMetricsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ComplianceMetricsFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ComplianceMetricsRule.Arn

  # EventBridge rule to trigger report generation
  ComplianceReportRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to trigger compliance report generation
      ScheduleExpression: !Ref ReportSchedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt ComplianceReportFunction.Arn
          Id: ComplianceReportFunction

  ComplianceReportPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ComplianceReportFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ComplianceReportRule.Arn

Outputs:
  ComplianceDashboardURL:
    Description: URL to the compliance dashboard
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardName}

  ComplianceNotificationTopicARN:
    Description: ARN of the SNS topic for compliance notifications
    Value: !Ref ComplianceNotificationTopic

  ComplianceMetricsFunctionARN:
    Description: ARN of the Lambda function for compliance metrics
    Value: !GetAtt ComplianceMetricsFunction.Arn

  ComplianceReportFunctionARN:
    Description: ARN of the Lambda function for compliance reports
    Value: !GetAtt ComplianceReportFunction.Arn 