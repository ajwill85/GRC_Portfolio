---
# CloudFormation template for deploying a compliance framework conformance pack
# This template creates an AWS Config Conformance Pack with a set of Config Rules
# that enforce security best practices aligned with common compliance frameworks
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for deploying a compliance framework conformance pack'

Parameters:
  # Name of the conformance pack to be created
  ConformancePackName:
    Type: String
    Description: Name of the conformance pack
    Default: ComplianceFrameworkPack

  # Name of the AWS Config delivery channel
  DeliveryChannelName:
    Type: String
    Description: Name of the AWS Config delivery channel
    Default: default

  # S3 bucket for AWS Config data storage
  ConfigBucket:
    Type: String
    Description: S3 bucket for AWS Config data
    Default: aws-config-bucket

Resources:
  # AWS Config Conformance Pack resource
  # This creates a conformance pack with a set of AWS Config rules
  # that align with common compliance frameworks like CIS, NIST, and PCI DSS
  ComplianceConformancePack:
    Type: AWS::Config::ConformancePack
    Properties:
      # Name of the conformance pack
      ConformancePackName: !Ref ConformancePackName
      # S3 bucket where AWS Config will store conformance pack templates and results
      DeliveryS3Bucket: !Ref ConfigBucket
      # The template body containing the AWS Config rules
      TemplateBody: |
        ---
        AWSTemplateFormatVersion: '2010-09-09'
        Description: 'Conformance pack for compliance framework'
        Resources:
          # Rule to check if IAM password policy meets requirements
          # Aligns with CIS AWS Foundations Benchmark controls
          IAMPasswordPolicy:
            Type: "AWS::Config::ConfigRule"
            Properties:
              ConfigRuleName: "iam-password-policy"
              Description: "Checks whether the account password policy for IAM users meets the specified requirements."
              Scope:
                ComplianceResourceTypes:
                  - "AWS::IAM::User"
              Source:
                Owner: "AWS"
                SourceIdentifier: "IAM_PASSWORD_POLICY"

          # Rule to check if S3 buckets allow public read access
          # Aligns with multiple compliance frameworks including PCI DSS, HIPAA, and CIS
          S3BucketPublicReadProhibited:
            Type: "AWS::Config::ConfigRule"
            Properties:
              ConfigRuleName: "s3-bucket-public-read-prohibited"
              Description: "Checks that your Amazon S3 buckets do not allow public read access."
              Scope:
                ComplianceResourceTypes:
                  - "AWS::S3::Bucket"
              Source:
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_PUBLIC_READ_PROHIBITED"

          # Rule to check if S3 buckets allow public write access
          # Aligns with multiple compliance frameworks including PCI DSS, HIPAA, and CIS
          S3BucketPublicWriteProhibited:
            Type: "AWS::Config::ConfigRule"
            Properties:
              ConfigRuleName: "s3-bucket-public-write-prohibited"
              Description: "Checks that your Amazon S3 buckets do not allow public write access."
              Scope:
                ComplianceResourceTypes:
                  - "AWS::S3::Bucket"
              Source:
                Owner: "AWS"
                SourceIdentifier: "S3_BUCKET_PUBLIC_WRITE_PROHIBITED"

          # Rule to check if EC2 instances have public IP addresses
          # Aligns with CIS AWS Foundations Benchmark and NIST 800-53
          EC2InstanceNoPublicIP:
            Type: "AWS::Config::ConfigRule"
            Properties:
              ConfigRuleName: "ec2-instance-no-public-ip"
              Description: "Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances are launched without public IP addresses."
              Scope:
                ComplianceResourceTypes:
                  - "AWS::EC2::Instance"
              Source:
                Owner: "AWS"
                SourceIdentifier: "EC2_INSTANCE_NO_PUBLIC_IP"

Outputs:
  # Name of the deployed conformance pack
  ConformancePackName:
    Description: Name of the deployed conformance pack
    Value: !Ref ConformancePackName

  # Name of the AWS Config delivery channel
  DeliveryChannelName:
    Description: Name of the AWS Config delivery channel
    Value: !Ref DeliveryChannelName

  # S3 bucket for AWS Config data
  ConfigBucket:
    Description: S3 bucket for AWS Config data
    Value: !Ref ConfigBucket 