---
# SSM Automation Document for Security Group Remediation
# This document automates the remediation of overly permissive security group rules
# It identifies and removes rules that allow unrestricted access to sensitive ports
description: Remediate security group rules that allow unrestricted access
schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  # The security group to remediate
  SecurityGroupId:
    type: String
    description: The ID of the security group to remediate
  
  # IAM role that allows SSM Automation to perform actions
  AutomationAssumeRole:
    type: String
    description: The ARN of the role that allows Automation to perform the actions on your behalf
  
  # Whether to remediate ingress (inbound) rules
  RemediateIngressRules:
    type: Boolean
    description: Whether to remediate ingress rules
    default: true
  
  # Whether to remediate egress (outbound) rules
  RemediateEgressRules:
    type: Boolean
    description: Whether to remediate egress rules
    default: true
  
  # List of ports that should be restricted from public access
  # These are commonly targeted ports for attacks
  RestrictedPorts:
    type: StringList
    description: List of ports to restrict from public access
    default:
      - '22'    # SSH
      - '3389'  # RDP
      - '1433'  # MSSQL
      - '3306'  # MySQL/MariaDB
      - '5432'  # PostgreSQL
      - '27017' # MongoDB
      - '27018' # MongoDB
      - '6379'  # Redis
      - '11211' # Memcached
      - '9200'  # Elasticsearch HTTP
      - '9300'  # Elasticsearch transport
  
  # S3 bucket to store remediation evidence for audit purposes
  EvidenceBucket:
    type: String
    description: S3 bucket to store remediation evidence
    default: ''
  
  # SNS topic for notifications about remediation actions
  SNSTopicArn:
    type: String
    description: SNS topic ARN for notifications
    default: ''

# The sequence of steps to execute
mainSteps:
  # Step 1: Get information about the security group
  - name: getSecurityGroupInfo
    action: aws:executeAwsApi
    onFailure: Abort
    inputs:
      Service: ec2
      Api: DescribeSecurityGroups
      GroupIds:
        - '{{ SecurityGroupId }}'
    outputs:
      - Name: securityGroupDetails
        Selector: $.SecurityGroups[0]
        Type: StringMap
      - Name: ingressRules
        Selector: $.SecurityGroups[0].IpPermissions
        Type: StringList
      - Name: egressRules
        Selector: $.SecurityGroups[0].IpPermissionsEgress
        Type: StringList
      - Name: vpcId
        Selector: $.SecurityGroups[0].VpcId
        Type: String
      - Name: groupName
        Selector: $.SecurityGroups[0].GroupName
        Type: String
      - Name: groupDescription
        Selector: $.SecurityGroups[0].Description
        Type: String

  # Step 2: Capture the original state of the security group for audit purposes
  - name: captureOriginalState
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json
        import boto3
        import datetime

        def script_handler(events, context):
            security_group_id = events['SecurityGroupId']
            security_group_details = events['SecurityGroupDetails']
            evidence_bucket = events['EvidenceBucket']
            
            # Format the security group details for evidence
            evidence = {
                'remediation_type': 'Security Group Remediation',
                'timestamp': datetime.datetime.now().isoformat(),
                'security_group_id': security_group_id,
                'original_state': json.loads(security_group_details)
            }
            
            # If evidence bucket is provided, save the evidence
            if evidence_bucket:
                try:
                    s3_client = boto3.client('s3')
                    # Create a unique key for the evidence file
                    evidence_key = f"remediation-logs/security-groups/{security_group_id}/{datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}-original.json"
                    
                    # Upload the evidence to S3 with encryption
                    s3_client.put_object(
                        Bucket=evidence_bucket,
                        Key=evidence_key,
                        Body=json.dumps(evidence, default=str),
                        ContentType='application/json',
                        ServerSideEncryption='AES256'
                    )
                    
                    return {
                        'status': 'Success',
                        'message': f"Original state saved to s3://{evidence_bucket}/{evidence_key}",
                        'evidence_key': evidence_key
                    }
                except Exception as e:
                    return {
                        'status': 'Warning',
                        'message': f"Failed to save evidence: {str(e)}",
                        'evidence_key': ''
                    }
            else:
                return {
                    'status': 'Skipped',
                    'message': 'No evidence bucket provided',
                    'evidence_key': ''
                }
      InputPayload:
        SecurityGroupId: '{{ SecurityGroupId }}'
        SecurityGroupDetails: '{{ getSecurityGroupInfo.securityGroupDetails }}'
        EvidenceBucket: '{{ EvidenceBucket }}'
    outputs:
      - Name: status
        Selector: $.Payload.status
        Type: String
      - Name: message
        Selector: $.Payload.message
        Type: String
      - Name: evidenceKey
        Selector: $.Payload.evidence_key
        Type: String

  # Step 3: Identify ingress rules that violate security best practices
  - name: identifyViolatingIngressRules
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json

        def script_handler(events, context):
            ingress_rules = json.loads(events['IngressRules'])
            restricted_ports = events['RestrictedPorts']
            
            # Convert restricted ports to integers for comparison
            restricted_ports_int = [int(port) for port in restricted_ports]
            
            # Identify violating rules
            violating_rules = []
            
            for rule in ingress_rules:
                # Check if rule allows access from 0.0.0.0/0 (IPv4) or ::/0 (IPv6)
                # These CIDR blocks represent "the entire internet"
                has_public_access = False
                for ip_range in rule.get('IpRanges', []):
                    if ip_range.get('CidrIp') == '0.0.0.0/0':
                        has_public_access = True
                        break
                
                for ipv6_range in rule.get('Ipv6Ranges', []):
                    if ipv6_range.get('CidrIpv6') == '::/0':
                        has_public_access = True
                        break
                
                if has_public_access:
                    # Check if rule allows access to restricted ports
                    from_port = rule.get('FromPort', 0)
                    to_port = rule.get('ToPort', 65535)
                    
                    # If port range includes any restricted port, or if all ports are allowed
                    if from_port is None or to_port is None:
                        # All ports allowed - this is definitely a violation
                        violating_rules.append(rule)
                    elif from_port <= to_port:
                        # Check if any restricted port falls within the allowed range
                        for port in restricted_ports_int:
                            if from_port <= port <= to_port:
                                violating_rules.append(rule)
                                break
            
            return {
                'violating_rules': violating_rules,
                'violating_rules_count': len(violating_rules)
            }
      InputPayload:
        IngressRules: '{{ getSecurityGroupInfo.ingressRules }}'
        RestrictedPorts: '{{ RestrictedPorts }}'
    outputs:
      - Name: violatingRules
        Selector: $.Payload.violating_rules
        Type: StringList
      - Name: violatingRulesCount
        Selector: $.Payload.violating_rules_count
        Type: Integer

  # Step 4: Remediate violating ingress rules by removing them
  - name: remediateIngressRules
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json
        import boto3

        def script_handler(events, context):
            security_group_id = events['SecurityGroupId']
            violating_rules = events['ViolatingRules']
            remediate_ingress = events['RemediateIngress']
            
            # Skip remediation if disabled in parameters
            if not remediate_ingress:
                return {
                    'status': 'Skipped',
                    'message': 'Ingress rule remediation is disabled',
                    'remediated_rules_count': 0
                }
            
            # Skip if no violating rules found
            if not violating_rules:
                return {
                    'status': 'Success',
                    'message': 'No violating ingress rules found',
                    'remediated_rules_count': 0
                }
            
            ec2_client = boto3.client('ec2')
            remediated_count = 0
            
            # Process each violating rule
            for rule in violating_rules:
                try:
                    # Prepare parameters for revoking the rule
                    params = {
                        'GroupId': security_group_id,
                        'IpPermissions': [rule]
                    }
                    
                    # Revoke the rule
                    ec2_client.revoke_security_group_ingress(**params)
                    remediated_count += 1
                except Exception as e:
                    print(f"Error revoking ingress rule: {str(e)}")
            
            return {
                'status': 'Success',
                'message': f"Remediated {remediated_count} of {len(violating_rules)} violating ingress rules",
                'remediated_rules_count': remediated_count
            }
      InputPayload:
        SecurityGroupId: '{{ SecurityGroupId }}'
        ViolatingRules: '{{ identifyViolatingIngressRules.violatingRules }}'
        RemediateIngress: '{{ RemediateIngressRules }}'
    outputs:
      - Name: status
        Selector: $.Payload.status
        Type: String
      - Name: message
        Selector: $.Payload.message
        Type: String
      - Name: remediatedRulesCount
        Selector: $.Payload.remediated_rules_count
        Type: Integer

  # Step 5: Identify egress rules that violate security best practices
  - name: identifyViolatingEgressRules
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json

        def script_handler(events, context):
            egress_rules = json.loads(events['EgressRules'])
            
            # Identify overly permissive egress rules (allowing all traffic to 0.0.0.0/0)
            # For egress, we're primarily concerned with rules that allow ALL protocols to ALL destinations
            violating_rules = []
            
            for rule in egress_rules:
                # Check if rule allows all traffic to 0.0.0.0/0 or ::/0
                has_public_access = False
                for ip_range in rule.get('IpRanges', []):
                    if ip_range.get('CidrIp') == '0.0.0.0/0':
                        has_public_access = True
                        break
                
                for ipv6_range in rule.get('Ipv6Ranges', []):
                    if ipv6_range.get('CidrIpv6') == '::/0':
                        has_public_access = True
                        break
                
                # IpProtocol = '-1' means "all protocols"
                if has_public_access and rule.get('IpProtocol') == '-1':
                    # Rule allows all traffic to anywhere - this is a violation
                    violating_rules.append(rule)
            
            return {
                'violating_rules': violating_rules,
                'violating_rules_count': len(violating_rules)
            }
      InputPayload:
        EgressRules: '{{ getSecurityGroupInfo.egressRules }}'
    outputs:
      - Name: violatingRules
        Selector: $.Payload.violating_rules
        Type: StringList
      - Name: violatingRulesCount
        Selector: $.Payload.violating_rules_count
        Type: Integer

  # Step 6: Remediate violating egress rules by replacing them with more specific rules
  - name: remediateEgressRules
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json
        import boto3

        def script_handler(events, context):
            security_group_id = events['SecurityGroupId']
            violating_rules = events['ViolatingRules']
            remediate_egress = events['RemediateEgress']
            
            # Skip remediation if disabled in parameters
            if not remediate_egress:
                return {
                    'status': 'Skipped',
                    'message': 'Egress rule remediation is disabled',
                    'remediated_rules_count': 0
                }
            
            # Skip if no violating rules found
            if not violating_rules:
                return {
                    'status': 'Success',
                    'message': 'No violating egress rules found',
                    'remediated_rules_count': 0
                }
            
            ec2_client = boto3.client('ec2')
            remediated_count = 0
            
            # Process each violating rule
            for rule in violating_rules:
                try:
                    # Prepare parameters for revoking the rule
                    params = {
                        'GroupId': security_group_id,
                        'IpPermissions': [rule]
                    }
                    
                    # Revoke the overly permissive rule
                    ec2_client.revoke_security_group_egress(**params)
                    remediated_count += 1
                    
                    # Add more specific rules instead
                    # For example, allow HTTPS outbound which is commonly needed
                    # This ensures functionality while improving security
                    ec2_client.authorize_security_group_egress(
                        GroupId=security_group_id,
                        IpPermissions=[
                            {
                                'IpProtocol': 'tcp',
                                'FromPort': 443,
                                'ToPort': 443,
                                'IpRanges': [{'CidrIp': '0.0.0.0/0'}]
                            }
                        ]
                    )
                except Exception as e:
                    print(f"Error remediating egress rule: {str(e)}")
            
            return {
                'status': 'Success',
                'message': f"Remediated {remediated_count} of {len(violating_rules)} violating egress rules",
                'remediated_rules_count': remediated_count
            }
      InputPayload:
        SecurityGroupId: '{{ SecurityGroupId }}'
        ViolatingRules: '{{ identifyViolatingEgressRules.violatingRules }}'
        RemediateEgress: '{{ RemediateEgressRules }}'
    outputs:
      - Name: status
        Selector: $.Payload.status
        Type: String
      - Name: message
        Selector: $.Payload.message
        Type: String
      - Name: remediatedRulesCount
        Selector: $.Payload.remediated_rules_count
        Type: Integer

  # Step 7: Capture the state of the security group after remediation
  - name: captureRemediatedState
    action: aws:executeAwsApi
    onFailure: Continue
    inputs:
      Service: ec2
      Api: DescribeSecurityGroups
      GroupIds:
        - '{{ SecurityGroupId }}'
    outputs:
      - Name: remediatedSecurityGroupDetails
        Selector: $.SecurityGroups[0]
        Type: StringMap

  # Step 8: Log the remediation actions and send notifications
  - name: logRemediation
    action: aws:executeScript
    onFailure: Continue
    inputs:
      Runtime: python3.8
      Handler: script_handler
      Script: |-
        import json
        import boto3
        import datetime

        def script_handler(events, context):
            security_group_id = events['SecurityGroupId']
            original_state = json.loads(events['OriginalState'])
            remediated_state = json.loads(events['RemediatedState'])
            evidence_bucket = events['EvidenceBucket']
            sns_topic_arn = events['SNSTopicArn']
            
            # Format the remediation details for logging and notification
            remediation_details = {
                'remediation_type': 'Security Group Remediation',
                'timestamp': datetime.datetime.now().isoformat(),
                'security_group_id': security_group_id,
                'original_state': original_state,
                'remediated_state': remediated_state,
                'ingress_rules_remediated': events['IngressRulesRemediated'],
                'egress_rules_remediated': events['EgressRulesRemediated']
            }
            
            # Save evidence if bucket is provided
            if evidence_bucket:
                try:
                    s3_client = boto3.client('s3')
                    # Create a unique key for the evidence file
                    evidence_key = f"remediation-logs/security-groups/{security_group_id}/{datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}-remediated.json"
                    
                    # Upload the evidence to S3 with encryption
                    s3_client.put_object(
                        Bucket=evidence_bucket,
                        Key=evidence_key,
                        Body=json.dumps(remediation_details, default=str),
                        ContentType='application/json',
                        ServerSideEncryption='AES256'
                    )
                    
                    print(f"Remediation evidence saved to s3://{evidence_bucket}/{evidence_key}")
                except Exception as e:
                    print(f"Error saving remediation evidence: {str(e)}")
            
            # Send notification if SNS topic is provided
            if sns_topic_arn:
                try:
                    sns_client = boto3.client('sns')
                    
                    # Format a human-readable message for the notification
                    message = f"""
SECURITY ALERT: Security Group Remediation

Security Group ID: {security_group_id}
VPC ID: {original_state.get('VpcId', 'N/A')}
Group Name: {original_state.get('GroupName', 'N/A')}
Timestamp: {datetime.datetime.now().isoformat()}

Remediation Actions:
- Ingress Rules Remediated: {events['IngressRulesRemediated']}
- Egress Rules Remediated: {events['EgressRulesRemediated']}

This security group had overly permissive rules that have been automatically remediated.
Please review the security group configuration to ensure it meets your security requirements.

This is an automated message from the Security Group Remediation function.
                    """
                    
                    # Send the notification
                    sns_client.publish(
                        TopicArn=sns_topic_arn,
                        Subject=f"Security Group Remediated: {security_group_id}",
                        Message=message
                    )
                    
                    print(f"Notification sent to {sns_topic_arn}")
                except Exception as e:
                    print(f"Error sending notification: {str(e)}")
            
            return {
                'status': 'Success',
                'message': 'Remediation logged successfully'
            }
      InputPayload:
        SecurityGroupId: '{{ SecurityGroupId }}'
        OriginalState: '{{ getSecurityGroupInfo.securityGroupDetails }}'
        RemediatedState: '{{ captureRemediatedState.remediatedSecurityGroupDetails }}'
        IngressRulesRemediated: '{{ remediateIngressRules.remediatedRulesCount }}'
        EgressRulesRemediated: '{{ remediateEgressRules.remediatedRulesCount }}'
        EvidenceBucket: '{{ EvidenceBucket }}'
        SNSTopicArn: '{{ SNSTopicArn }}'
    outputs:
      - Name: status
        Selector: $.Payload.status
        Type: String
      - Name: message
        Selector: $.Payload.message
        Type: String

# Output values that can be used by other processes or for reporting
outputs:
  - getSecurityGroupInfo.vpcId
  - getSecurityGroupInfo.groupName
  - identifyViolatingIngressRules.violatingRulesCount
  - remediateIngressRules.remediatedRulesCount
  - identifyViolatingEgressRules.violatingRulesCount
  - remediateEgressRules.remediatedRulesCount 