AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lab 4: Security Monitoring and Incident Response - IAM Credential Monitor'

Parameters:
  # NotificationEmail parameter is removed as it's not used in this template
  
  SecurityMonitoringStackName:
    Type: String
    Description: Name of the security monitoring stack
    Default: security-monitoring-stack

Resources:
  # IAM Role for Lambda Function
  IAMCredentialMonitorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IAMCredentialMonitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListAccessKeys
                  - iam:GetAccessKeyLastUsed
                  - iam:UpdateAccessKey
                  - iam:DeleteAccessKey
                  - iam:ListUsers
                  - iam:GetUser
                Resource: '*'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !ImportValue 
                  'Fn::Sub': '${SecurityMonitoringStackName}-SecurityAlertsTopic'

  # Lambda Function for IAM Credential Monitoring
  IAMCredentialMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: iam-credential-monitor
      Handler: index.lambda_handler
      Role: !GetAtt IAMCredentialMonitorRole.Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          SNS_TOPIC_ARN: !ImportValue 
            'Fn::Sub': '${SecurityMonitoringStackName}-SecurityAlertsTopic'
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import datetime
          from datetime import timezone

          def lambda_handler(event, context):
              print(f"Received event: {json.dumps(event)}")
              
              # Get the SNS topic ARN from environment variables
              sns_topic_arn = os.environ.get('SNS_TOPIC_ARN')
              
              # Initialize AWS clients
              iam = boto3.client('iam')
              sns = boto3.client('sns')
              
              # Process the event based on the source
              if event.get('source') == 'aws.guardduty':
                  return handle_guardduty_finding(event, iam, sns, sns_topic_arn)
              elif event.get('detail-type') == 'AWS API Call via CloudTrail':
                  return handle_cloudtrail_event(event, iam, sns, sns_topic_arn)
              else:
                  print(f"Unsupported event type: {event.get('detail-type')}")
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Event type not supported')
                  }

          def handle_guardduty_finding(event, iam, sns, sns_topic_arn):
              finding = event.get('detail', {})
              finding_type = finding.get('type', '')
              
              # Check if this is an IAM credential compromise finding
              if 'UnauthorizedAccess:IAMUser/' in finding_type or 'CredentialAccess:IAMUser/' in finding_type:
                  # Extract the affected user from the finding
                  resource = finding.get('resource', {})
                  access_key_details = resource.get('accessKeyDetails', {})
                  username = access_key_details.get('userName', '')
                  access_key_id = access_key_details.get('accessKeyId', '')
                  
                  if username and access_key_id:
                      # Disable the compromised access key
                      try:
                          iam.update_access_key(
                              UserName=username,
                              AccessKeyId=access_key_id,
                              Status='Inactive'
                          )
                          
                          message = f"SECURITY ALERT: Potentially compromised IAM credentials detected\n\n" \
                                   f"Finding Type: {finding_type}\n" \
                                   f"User: {username}\n" \
                                   f"Access Key: {access_key_id}\n" \
                                   f"Action Taken: Access key has been automatically disabled\n\n" \
                                   f"Please investigate this incident immediately and follow the incident response playbook."
                          
                          # Send notification
                          sns.publish(
                              TopicArn=sns_topic_arn,
                              Subject="SECURITY ALERT: IAM Credentials Compromised",
                              Message=message
                          )
                          
                          return {
                              'statusCode': 200,
                              'body': json.dumps('Successfully handled GuardDuty finding')
                          }
                      except Exception as e:
                          print(f"Error handling GuardDuty finding: {str(e)}")
                          return {
                              'statusCode': 500,
                              'body': json.dumps(f'Error: {str(e)}')
                          }
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('GuardDuty finding not related to IAM credential compromise')
              }

          def handle_cloudtrail_event(event, iam, sns, sns_topic_arn):
              detail = event.get('detail', {})
              event_name = detail.get('eventName', '')
              source_ip = detail.get('sourceIPAddress', '')
              user_identity = detail.get('userIdentity', {})
              user_name = user_identity.get('userName', '')
              
              # Check for suspicious IAM activity
              suspicious_activity = False
              reason = ""
              
              # Check for access key creation from unusual IP
              if event_name == 'CreateAccessKey' and is_suspicious_ip(source_ip):
                  suspicious_activity = True
                  reason = f"Access key created from suspicious IP: {source_ip}"
              
              # Check for multiple access key creations in short time
              elif event_name == 'CreateAccessKey' and user_name:
                  if has_multiple_recent_keys(iam, user_name):
                      suspicious_activity = True
                      reason = "Multiple access keys created in a short time period"
              
              # Check for password policy changes
              elif event_name in ['UpdateAccountPasswordPolicy', 'DeleteAccountPasswordPolicy']:
                  suspicious_activity = True
                  reason = f"Password policy modified: {event_name}"
              
              if suspicious_activity and user_name:
                  # Send alert for suspicious activity
                  message = f"SECURITY ALERT: Suspicious IAM activity detected\n\n" \
                           f"Event: {event_name}\n" \
                           f"User: {user_name}\n" \
                           f"Source IP: {source_ip}\n" \
                           f"Reason: {reason}\n\n" \
                           f"Please investigate this activity immediately."
                  
                  # Send notification
                  sns.publish(
                      TopicArn=sns_topic_arn,
                      Subject="SECURITY ALERT: Suspicious IAM Activity",
                      Message=message
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Successfully handled suspicious IAM activity')
                  }
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('CloudTrail event not suspicious')
              }

          def is_suspicious_ip(ip_address):
              # This is a placeholder for IP reputation checking
              # In a real implementation, you would check against threat intelligence feeds
              suspicious_ips = ['1.2.3.4', '5.6.7.8']  # Example list
              return ip_address in suspicious_ips

          def has_multiple_recent_keys(iam, user_name):
              try:
                  # Get all access keys for the user
                  response = iam.list_access_keys(UserName=user_name)
                  access_keys = response.get('AccessKeyMetadata', [])
                  
                  # Check if there are multiple active keys
                  active_keys = [key for key in access_keys if key.get('Status') == 'Active']
                  
                  if len(active_keys) > 1:
                      # Check if any keys were created recently (within last 24 hours)
                      now = datetime.datetime.now(timezone.utc)
                      recent_keys = 0
                      
                      for key in active_keys:
                          create_date = key.get('CreateDate')
                          if create_date:
                              time_diff = now - create_date
                              if time_diff.total_seconds() < 86400:  # 24 hours in seconds
                                  recent_keys += 1
                      
                      return recent_keys > 1
                  
                  return False
              except Exception as e:
                  print(f"Error checking for multiple recent keys: {str(e)}")
                  return False

  # EventBridge Rule for GuardDuty IAM Findings
  GuardDutyIAMFindingsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: guardduty-iam-findings-rule
      Description: Rule for GuardDuty IAM credential findings
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
        detail:
          type:
            - prefix: UnauthorizedAccess:IAMUser/
            - prefix: CredentialAccess:IAMUser/
      State: ENABLED
      Targets:
        - Arn: !GetAtt IAMCredentialMonitorFunction.Arn
          Id: IAMCredentialMonitorFunction

  # EventBridge Rule for CloudTrail IAM Events
  CloudTrailIAMEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: cloudtrail-iam-events-rule
      Description: Rule for CloudTrail IAM events
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateAccessKey
            - UpdateAccessKey
            - DeleteAccessKey
            - CreateUser
            - UpdateAccountPasswordPolicy
            - DeleteAccountPasswordPolicy
      State: ENABLED
      Targets:
        - Arn: !GetAtt IAMCredentialMonitorFunction.Arn
          Id: IAMCredentialMonitorFunction

  # Lambda Permission for GuardDuty Rule
  GuardDutyRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IAMCredentialMonitorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyIAMFindingsRule.Arn

  # Lambda Permission for CloudTrail Rule
  CloudTrailRuleLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref IAMCredentialMonitorFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudTrailIAMEventsRule.Arn

Outputs:
  IAMCredentialMonitorFunction:
    Description: Lambda function for monitoring IAM credentials
    Value: !GetAtt IAMCredentialMonitorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-IAMCredentialMonitorFunction"

  GuardDutyIAMFindingsRule:
    Description: EventBridge rule for GuardDuty IAM findings
    Value: !Ref GuardDutyIAMFindingsRule
    Export:
      Name: !Sub "${AWS::StackName}-GuardDutyIAMFindingsRule"

  CloudTrailIAMEventsRule:
    Description: EventBridge rule for CloudTrail IAM events
    Value: !Ref CloudTrailIAMEventsRule
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailIAMEventsRule" 