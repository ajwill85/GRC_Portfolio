AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lab 4: Security Monitoring and Incident Response - Security Monitoring Infrastructure'

Parameters:
  NotificationEmail:
    Type: String
    Description: Email address to receive security notifications
    Default: security-alerts@example.com
  
  EnableGuardDuty:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable GuardDuty for threat detection
  
  EnableSecurityHub:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Enable Security Hub for security findings aggregation
  
  LogRetentionInDays:
    Type: Number
    Default: 90
    Description: Number of days to retain CloudWatch Logs
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Resources:
  # Security Monitoring SNS Topic
  SecurityAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Security Alerts
      TopicName: security-alerts-topic

  # SNS Subscription for Email Notifications
  SecurityAlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref SecurityAlertsTopic

  # CloudTrail Configuration
  SecurityTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailLogsBucketPolicy
    Properties:
      IsLogging: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      S3BucketName: !Ref CloudTrailLogsBucket
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogsRole.Arn
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - 'arn:aws:s3:::'
            - Type: AWS::Lambda::Function
              Values:
                - 'arn:aws:lambda'

  # S3 Bucket for CloudTrail Logs
  CloudTrailLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket Policy for CloudTrail
  CloudTrailLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailLogsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${CloudTrailLogsBucket}'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${CloudTrailLogsBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  # CloudWatch Log Group for CloudTrail
  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/cloudtrail/security-monitoring
      RetentionInDays: !Ref LogRetentionInDays

  # IAM Role for CloudTrail to CloudWatch Logs
  CloudTrailLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # GuardDuty Detector
  GuardDutyDetector:
    Type: AWS::GuardDuty::Detector
    Condition: GuardDutyEnabled
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES

  # Security Hub
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Condition: SecurityHubEnabled

  # EventBridge Rule for GuardDuty Findings
  GuardDutyEventRule:
    Type: AWS::Events::Rule
    Condition: GuardDutyEnabled
    Properties:
      Name: guardduty-findings-rule
      Description: Rule for GuardDuty findings
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      State: ENABLED
      Targets:
        - Arn: !Ref SecurityAlertsTopic
          Id: SecurityAlertsTopic

  # EventBridge Rule for Security Hub Findings
  SecurityHubEventRule:
    Type: AWS::Events::Rule
    Condition: SecurityHubEnabled
    Properties:
      Name: securityhub-findings-rule
      Description: Rule for Security Hub findings
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
      State: ENABLED
      Targets:
        - Arn: !Ref SecurityAlertsTopic
          Id: SecurityAlertsTopic

  # CloudWatch Dashboard for Security Monitoring
  SecurityDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: SecurityMonitoringDashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudTrail", "CloudTrailEventCount", "EventName", "ConsoleLogin" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Console Login Events",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudTrail", "CloudTrailEventCount", "EventName", "CreateAccessKey" ],
                  [ "AWS/CloudTrail", "CloudTrailEventCount", "EventName", "DeleteAccessKey" ],
                  [ "AWS/CloudTrail", "CloudTrailEventCount", "EventName", "UpdateAccessKey" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "IAM Access Key Events",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 24,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/CloudTrail", "CloudTrailEventCount", "EventSource", "iam.amazonaws.com" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "IAM API Calls",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarm for Unusual IAM Activity
  UnusualIAMActivityAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: UnusualIAMActivityAlarm
      AlarmDescription: Alarm for unusual IAM activity
      MetricName: CloudTrailEventCount
      Namespace: AWS/CloudTrail
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: EventSource
          Value: iam.amazonaws.com
      AlarmActions:
        - !Ref SecurityAlertsTopic
      InsufficientDataActions:
        - !Ref SecurityAlertsTopic

Conditions:
  GuardDutyEnabled: !Equals [!Ref EnableGuardDuty, 'true']
  SecurityHubEnabled: !Equals [!Ref EnableSecurityHub, 'true']

Outputs:
  SecurityAlertsTopic:
    Description: ARN of the SNS topic for security alerts
    Value: !Ref SecurityAlertsTopic
    Export:
      Name: !Sub "${AWS::StackName}-SecurityAlertsTopic"

  CloudTrailLogsBucket:
    Description: Name of the S3 bucket for CloudTrail logs
    Value: !Ref CloudTrailLogsBucket
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailLogsBucket"

  CloudTrailLogGroup:
    Description: Name of the CloudWatch Logs group for CloudTrail
    Value: !Ref CloudTrailLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-CloudTrailLogGroup"

  SecurityDashboard:
    Description: URL to the Security Monitoring Dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${SecurityDashboard}"
    Export:
      Name: !Sub "${AWS::StackName}-SecurityDashboard" 