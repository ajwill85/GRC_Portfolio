{
  "schemaVersion": "0.3",
  "description": "Automation document for isolating a potentially compromised EC2 instance",
  "assumeRole": "{{ AutomationAssumeRole }}",
  "parameters": {
    "InstanceId": {
      "type": "String",
      "description": "ID of the instance to isolate"
    },
    "IsolationSecurityGroupId": {
      "type": "String",
      "description": "Security group ID to apply for isolation (no inbound/outbound except for security tools)",
      "default": ""
    },
    "CreateIsolationSecurityGroup": {
      "type": "Boolean",
      "description": "Whether to create an isolation security group if one is not provided",
      "default": true
    },
    "CreateForensicSnapshot": {
      "type": "Boolean",
      "description": "Whether to create a forensic snapshot of all instance volumes",
      "default": true
    },
    "PreserveNetworkInfo": {
      "type": "Boolean",
      "description": "Whether to preserve original security group and network information for later restoration",
      "default": true
    },
    "AutomationAssumeRole": {
      "type": "String",
      "description": "ARN of the role that allows Automation to perform the actions on your behalf",
      "default": ""
    },
    "S3BucketForEvidence": {
      "type": "String",
      "description": "S3 bucket to store evidence and forensic artifacts",
      "default": ""
    },
    "SNSTopicArn": {
      "type": "String",
      "description": "SNS Topic ARN for notifications about the isolation process",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "name": "verifyInstance",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "InstanceState",
          "Selector": "$.Reservations[0].Instances[0].State.Name",
          "Type": "String"
        },
        {
          "Name": "VpcId",
          "Selector": "$.Reservations[0].Instances[0].VpcId",
          "Type": "String"
        },
        {
          "Name": "SubnetId",
          "Selector": "$.Reservations[0].Instances[0].SubnetId",
          "Type": "String"
        },
        {
          "Name": "SecurityGroups",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups",
          "Type": "StringList"
        },
        {
          "Name": "SecurityGroupIds",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups[*].GroupId",
          "Type": "StringList"
        }
      ]
    },
    {
      "name": "captureInstanceDetails",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    import json\n    import datetime\n    import boto3\n    \n    ec2 = boto3.client('ec2')\n    \n    # Get instance details\n    instance_id = events['InstanceId']\n    response = ec2.describe_instances(InstanceIds=[instance_id])\n    instance = response['Reservations'][0]['Instances'][0]\n    \n    # Get network interface details\n    network_interfaces = []\n    for ni in instance.get('NetworkInterfaces', []):\n        ni_info = {\n            'NetworkInterfaceId': ni.get('NetworkInterfaceId'),\n            'SubnetId': ni.get('SubnetId'),\n            'PrivateIpAddress': ni.get('PrivateIpAddress'),\n            'PublicIpAddress': ni.get('Association', {}).get('PublicIp'),\n            'SecurityGroups': [sg.get('GroupId') for sg in ni.get('Groups', [])]\n        }\n        network_interfaces.append(ni_info)\n    \n    # Get volume details\n    volumes = []\n    for bdm in instance.get('BlockDeviceMappings', []):\n        if 'Ebs' in bdm:\n            volumes.append({\n                'DeviceName': bdm.get('DeviceName'),\n                'VolumeId': bdm['Ebs'].get('VolumeId'),\n                'DeleteOnTermination': bdm['Ebs'].get('DeleteOnTermination')\n            })\n    \n    # Compile all details\n    instance_details = {\n        'InstanceId': instance_id,\n        'InstanceType': instance.get('InstanceType'),\n        'State': instance.get('State', {}).get('Name'),\n        'LaunchTime': instance.get('LaunchTime').isoformat() if 'LaunchTime' in instance else None,\n        'VpcId': instance.get('VpcId'),\n        'SubnetId': instance.get('SubnetId'),\n        'PrivateIpAddress': instance.get('PrivateIpAddress'),\n        'PublicIpAddress': instance.get('PublicIpAddress'),\n        'SecurityGroups': [sg for sg in instance.get('SecurityGroups', [])],\n        'NetworkInterfaces': network_interfaces,\n        'Volumes': volumes,\n        'Tags': instance.get('Tags', []),\n        'IamInstanceProfile': instance.get('IamInstanceProfile', {}).get('Arn') if 'IamInstanceProfile' in instance else None,\n        'CaptureTimestamp': datetime.datetime.now().isoformat()\n    }\n    \n    return {\n        'InstanceDetails': json.dumps(instance_details, default=str),\n        'SecurityGroupIds': [sg.get('GroupId') for sg in instance.get('SecurityGroups', [])],\n        'VpcId': instance.get('VpcId'),\n        'VolumeIds': [volume['VolumeId'] for volume in volumes]\n    }",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}"
        }
      },
      "outputs": [
        {
          "Name": "InstanceDetails",
          "Selector": "$.Payload.InstanceDetails",
          "Type": "String"
        },
        {
          "Name": "SecurityGroupIds",
          "Selector": "$.Payload.SecurityGroupIds",
          "Type": "StringList"
        },
        {
          "Name": "VpcId",
          "Selector": "$.Payload.VpcId",
          "Type": "String"
        },
        {
          "Name": "VolumeIds",
          "Selector": "$.Payload.VolumeIds",
          "Type": "StringList"
        }
      ]
    },
    {
      "name": "saveInstanceDetailsToS3",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    import boto3\n    import datetime\n    import json\n    \n    if not events['S3BucketForEvidence']:\n        return {'Status': 'Skipped', 'Message': 'No S3 bucket provided for evidence'}\n    \n    s3 = boto3.client('s3')\n    instance_id = events['InstanceId']\n    timestamp = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n    \n    # Save instance details to S3\n    s3_key = f\"evidence/host-isolation/{instance_id}/{timestamp}/instance-details.json\"\n    \n    try:\n        s3.put_object(\n            Bucket=events['S3BucketForEvidence'],\n            Key=s3_key,\n            Body=events['InstanceDetails'],\n            ContentType='application/json',\n            ServerSideEncryption='AES256'\n        )\n        \n        return {\n            'Status': 'Success',\n            'Message': f\"Instance details saved to s3://{events['S3BucketForEvidence']}/{s3_key}\",\n            'S3Key': s3_key\n        }\n    except Exception as e:\n        return {\n            'Status': 'Failed',\n            'Message': f\"Failed to save instance details to S3: {str(e)}\"\n        }",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "InstanceDetails": "{{ captureInstanceDetails.InstanceDetails }}",
          "S3BucketForEvidence": "{{ S3BucketForEvidence }}"
        }
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.Status",
          "Type": "String"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.Message",
          "Type": "String"
        }
      ]
    },
    {
      "name": "createForensicSnapshots",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    import boto3\n    import datetime\n    \n    if not events['CreateForensicSnapshot']:\n        return {'Status': 'Skipped', 'Message': 'Snapshot creation skipped based on parameters'}\n    \n    ec2 = boto3.client('ec2')\n    instance_id = events['InstanceId']\n    volume_ids = events['VolumeIds']\n    timestamp = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n    \n    snapshots = []\n    for volume_id in volume_ids:\n        try:\n            response = ec2.create_snapshot(\n                VolumeId=volume_id,\n                Description=f\"Forensic snapshot of {volume_id} from instance {instance_id} created at {timestamp}\",\n                TagSpecifications=[\n                    {\n                        'ResourceType': 'snapshot',\n                        'Tags': [\n                            {'Key': 'Name', 'Value': f\"Forensic-{instance_id}-{volume_id}-{timestamp}\"},\n                            {'Key': 'Purpose', 'Value': 'Forensic Investigation'},\n                            {'Key': 'InstanceId', 'Value': instance_id},\n                            {'Key': 'CreationTime', 'Value': timestamp},\n                            {'Key': 'AutomationDocument', 'Value': 'HostIsolationRunbook'}\n                        ]\n                    }\n                ]\n            )\n            snapshots.append({\n                'VolumeId': volume_id,\n                'SnapshotId': response['SnapshotId']\n            })\n        except Exception as e:\n            print(f\"Error creating snapshot for volume {volume_id}: {str(e)}\")\n    \n    return {\n        'Status': 'Success' if snapshots else 'Failed',\n        'Message': f\"Created {len(snapshots)} forensic snapshots\",\n        'Snapshots': snapshots\n    }",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "VolumeIds": "{{ captureInstanceDetails.VolumeIds }}",
          "CreateForensicSnapshot": "{{ CreateForensicSnapshot }}"
        }
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.Status",
          "Type": "String"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.Message",
          "Type": "String"
        },
        {
          "Name": "Snapshots",
          "Selector": "$.Payload.Snapshots",
          "Type": "StringMap"
        }
      ]
    },
    {
      "name": "createIsolationSecurityGroup",
      "action": "aws:executeScript",
      "onFailure": "Abort",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    import boto3\n    import datetime\n    \n    # Use provided isolation SG if available\n    if events['IsolationSecurityGroupId']:\n        return {\n            'Status': 'Success',\n            'Message': 'Using provided isolation security group',\n            'IsolationSecurityGroupId': events['IsolationSecurityGroupId']\n        }\n    \n    # Create new isolation SG if needed and allowed\n    if not events['CreateIsolationSecurityGroup']:\n        return {\n            'Status': 'Failed',\n            'Message': 'No isolation security group provided and creation not allowed',\n            'IsolationSecurityGroupId': ''\n        }\n    \n    ec2 = boto3.client('ec2')\n    instance_id = events['InstanceId']\n    vpc_id = events['VpcId']\n    timestamp = datetime.datetime.now().strftime('%Y%m%d-%H%M%S')\n    \n    try:\n        # Create a new security group with no inbound rules\n        response = ec2.create_security_group(\n            GroupName=f\"ForensicIsolation-{instance_id}-{timestamp}\",\n            Description=f\"Security group for isolating instance {instance_id} during forensic investigation\",\n            VpcId=vpc_id,\n            TagSpecifications=[\n                {\n                    'ResourceType': 'security-group',\n                    'Tags': [\n                        {'Key': 'Name', 'Value': f\"ForensicIsolation-{instance_id}-{timestamp}\"},\n                        {'Key': 'Purpose', 'Value': 'Forensic Investigation'},\n                        {'Key': 'InstanceId', 'Value': instance_id},\n                        {'Key': 'CreationTime', 'Value': timestamp},\n                        {'Key': 'AutomationDocument', 'Value': 'HostIsolationRunbook'}\n                    ]\n                }\n            ]\n        )\n        \n        sg_id = response['GroupId']\n        \n        # Remove default outbound rule\n        ec2.revoke_security_group_egress(\n            GroupId=sg_id,\n            IpPermissions=[\n                {\n                    'IpProtocol': '-1',\n                    'IpRanges': [{'CidrIp': '0.0.0.0/0'}],\n                    'Ipv6Ranges': [],\n                    'PrefixListIds': [],\n                    'UserIdGroupPairs': []\n                }\n            ]\n        )\n        \n        # Add only specific outbound rules for security tooling (example: allow outbound HTTPS to AWS SSM endpoints)\n        # Uncomment and modify if specific outbound access is needed for your security tools\n        # ec2.authorize_security_group_egress(\n        #     GroupId=sg_id,\n        #     IpPermissions=[\n        #         {\n        #             'IpProtocol': 'tcp',\n        #             'FromPort': 443,\n        #             'ToPort': 443,\n        #             'IpRanges': [{'CidrIp': '*.amazonaws.com'}]\n        #         }\n        #     ]\n        # )\n        \n        return {\n            'Status': 'Success',\n            'Message': f\"Created isolation security group {sg_id}\",\n            'IsolationSecurityGroupId': sg_id\n        }\n    except Exception as e:\n        return {\n            'Status': 'Failed',\n            'Message': f\"Failed to create isolation security group: {str(e)}\",\n            'IsolationSecurityGroupId': ''\n        }",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "VpcId": "{{ captureInstanceDetails.VpcId }}",
          "IsolationSecurityGroupId": "{{ IsolationSecurityGroupId }}",
          "CreateIsolationSecurityGroup": "{{ CreateIsolationSecurityGroup }}"
        }
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.Status",
          "Type": "String"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.Message",
          "Type": "String"
        },
        {
          "Name": "IsolationSecurityGroupId",
          "Selector": "$.Payload.IsolationSecurityGroupId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "isolateInstance",
      "action": "aws:executeAwsApi",
      "onFailure": "Abort",
      "inputs": {
        "Service": "ec2",
        "Api": "ModifyInstanceAttribute",
        "InstanceId": "{{ InstanceId }}",
        "Groups": [
          "{{ createIsolationSecurityGroup.IsolationSecurityGroupId }}"
        ]
      }
    },
    {
      "name": "verifyIsolation",
      "action": "aws:executeAwsApi",
      "onFailure": "Continue",
      "inputs": {
        "Service": "ec2",
        "Api": "DescribeInstances",
        "InstanceIds": [
          "{{ InstanceId }}"
        ]
      },
      "outputs": [
        {
          "Name": "CurrentSecurityGroups",
          "Selector": "$.Reservations[0].Instances[0].SecurityGroups[*].GroupId",
          "Type": "StringList"
        }
      ]
    },
    {
      "name": "sendNotification",
      "action": "aws:executeScript",
      "onFailure": "Continue",
      "inputs": {
        "Runtime": "python3.8",
        "Handler": "script_handler",
        "Script": "def script_handler(events, context):\n    import boto3\n    import json\n    \n    if not events['SNSTopicArn']:\n        return {'Status': 'Skipped', 'Message': 'No SNS topic ARN provided'}\n    \n    sns = boto3.client('sns')\n    \n    # Prepare notification message\n    message = {\n        'Subject': f\"Host Isolation Complete for {events['InstanceId']}\",\n        'Message': f\"\"\"\nSECURITY ALERT: Host Isolation Action Complete\n\nInstance ID: {events['InstanceId']}\nIsolation Status: {'Success' if events['IsolationSuccessful'] else 'Failed'}\n\nActions Taken:\n- Instance has been isolated using security group {events['IsolationSecurityGroupId']}\n- Original security groups have been preserved for reference\n{'- Forensic snapshots have been created for all volumes' if events['CreateForensicSnapshot'] else ''}\n{'- Instance details have been saved to S3' if events['S3Bucket'] else ''}\n\nNext Steps:\n1. Investigate the instance for signs of compromise\n2. Collect any additional forensic artifacts needed\n3. If malicious activity is confirmed, consider terminating the instance\n4. If false positive, restore original security groups\n\nThis is an automated message. Please follow your incident response procedures.\n\"\"\"\n    }\n    \n    # Send notification\n    try:\n        response = sns.publish(\n            TopicArn=events['SNSTopicArn'],\n            Subject=message['Subject'],\n            Message=message['Message']\n        )\n        \n        return {\n            'Status': 'Success',\n            'Message': f\"Notification sent to {events['SNSTopicArn']}\",\n            'MessageId': response.get('MessageId')\n        }\n    except Exception as e:\n        return {\n            'Status': 'Failed',\n            'Message': f\"Failed to send notification: {str(e)}\"\n        }",
        "InputPayload": {
          "InstanceId": "{{ InstanceId }}",
          "IsolationSecurityGroupId": "{{ createIsolationSecurityGroup.IsolationSecurityGroupId }}",
          "IsolationSuccessful": "{{ contains(verifyIsolation.CurrentSecurityGroups, createIsolationSecurityGroup.IsolationSecurityGroupId) }}",
          "CreateForensicSnapshot": "{{ CreateForensicSnapshot }}",
          "S3Bucket": "{{ S3BucketForEvidence }}",
          "SNSTopicArn": "{{ SNSTopicArn }}"
        }
      },
      "outputs": [
        {
          "Name": "Status",
          "Selector": "$.Payload.Status",
          "Type": "String"
        },
        {
          "Name": "Message",
          "Selector": "$.Payload.Message",
          "Type": "String"
        }
      ]
    }
  ],
  "outputs": [
    {
      "Name": "InstanceId",
      "Selector": "{{ InstanceId }}",
      "Type": "String"
    },
    {
      "Name": "OriginalSecurityGroups",
      "Selector": "{{ captureInstanceDetails.SecurityGroupIds }}",
      "Type": "StringList"
    },
    {
      "Name": "IsolationSecurityGroupId",
      "Selector": "{{ createIsolationSecurityGroup.IsolationSecurityGroupId }}",
      "Type": "String"
    },
    {
      "Name": "ForensicSnapshotsCreated",
      "Selector": "{{ createForensicSnapshots.Status }}",
      "Type": "String"
    },
    {
      "Name": "IsolationStatus",
      "Selector": "{{ contains(verifyIsolation.CurrentSecurityGroups, createIsolationSecurityGroup.IsolationSecurityGroupId) }}",
      "Type": "Boolean"
    }
  ]
} 