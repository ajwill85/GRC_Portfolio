AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lab 9: Incident Response and Recovery - Forensics Automation'

Parameters:
  Environment:
    Type: String
    Default: Lab9
    Description: Environment name for resource tagging
  ForensicsBucketName:
    Type: String
    Description: Name of the forensics S3 bucket (from incident-response.yaml)

Resources:
  # Step Functions State Machine
  ForensicsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub ${Environment}-forensics-workflow
      RoleArn: !GetAtt ForensicsStateMachineRole.Arn
      Definition:
        StartAt: CollectInstanceMetadata
        States:
          CollectInstanceMetadata:
            Type: Task
            Resource: !GetAtt CollectMetadataFunction.Arn
            Next: CreateMemorySnapshot
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyFailure
          CreateMemorySnapshot:
            Type: Task
            Resource: !GetAtt CreateMemorySnapshotFunction.Arn
            Next: CreateDiskSnapshot
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyFailure
          CreateDiskSnapshot:
            Type: Task
            Resource: !GetAtt CreateDiskSnapshotFunction.Arn
            Next: CollectLogs
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyFailure
          CollectLogs:
            Type: Task
            Resource: !GetAtt CollectLogsFunction.Arn
            Next: NotifySuccess
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: NotifyFailure
          NotifySuccess:
            Type: Task
            Resource: !GetAtt NotificationFunction.Arn
            End: true
          NotifyFailure:
            Type: Task
            Resource: !GetAtt NotificationFunction.Arn
            End: true

  # Lambda Functions
  CollectMetadataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-collect-metadata
      Handler: index.handler
      Role: !GetAtt ForensicsLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def handler(event, context):
              print("Collecting instance metadata")
              instance_id = event['instanceId']
              
              ec2 = boto3.client('ec2')
              s3 = boto3.client('s3')
              
              # Get instance metadata
              response = ec2.describe_instances(InstanceIds=[instance_id])
              metadata = response['Reservations'][0]['Instances'][0]
              
              # Save metadata to S3
              s3.put_object(
                  Bucket=os.environ['FORENSICS_BUCKET'],
                  Key=f'metadata/{instance_id}/instance.json',
                  Body=json.dumps(metadata, default=str)
              )
              
              return {
                  'instanceId': instance_id,
                  'metadata': metadata
              }
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          FORENSICS_BUCKET: !Ref ForensicsBucketName
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CreateMemorySnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-create-memory-snapshot
      Handler: index.handler
      Role: !GetAtt ForensicsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import time

          def handler(event, context):
              print("Creating memory snapshot")
              instance_id = event['instanceId']
              
              ssm = boto3.client('ssm')
              s3 = boto3.client('s3')
              
              # Run memory capture command
              response = ssm.send_command(
                  InstanceIds=[instance_id],
                  DocumentName='AWS-RunShellScript',
                  Parameters={
                      'commands': [
                          'aws s3 cp /proc/kcore s3://' + 
                          os.environ['FORENSICS_BUCKET'] + 
                          f'/memory/{instance_id}/memory.raw'
                      ]
                  }
              )
              
              command_id = response['Command']['CommandId']
              
              # Wait for command completion
              while True:
                  time.sleep(5)
                  result = ssm.get_command_invocation(
                      CommandId=command_id,
                      InstanceId=instance_id
                  )
                  if result['Status'] in ['Success', 'Failed']:
                      break
              
              return {
                  'instanceId': instance_id,
                  'commandId': command_id,
                  'status': result['Status']
              }
      Runtime: python3.9
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          FORENSICS_BUCKET: !Ref ForensicsBucketName
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CreateDiskSnapshotFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-create-disk-snapshot
      Handler: index.handler
      Role: !GetAtt ForensicsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          import time

          def handler(event, context):
              print("Creating disk snapshot")
              instance_id = event['instanceId']
              
              ec2 = boto3.client('ec2')
              
              # Get instance volumes
              response = ec2.describe_instances(InstanceIds=[instance_id])
              volumes = response['Reservations'][0]['Instances'][0]['BlockDeviceMappings']
              
              snapshots = []
              for volume in volumes:
                  volume_id = volume['Ebs']['VolumeId']
                  
                  # Create snapshot
                  snapshot = ec2.create_snapshot(
                      VolumeId=volume_id,
                      Description=f'Forensic snapshot of volume {volume_id}'
                  )
                  
                  # Tag snapshot
                  ec2.create_tags(
                      Resources=[snapshot['SnapshotId']],
                      Tags=[
                          {'Key': 'Purpose', 'Value': 'Forensics'},
                          {'Key': 'InstanceId', 'Value': instance_id}
                      ]
                  )
                  
                  snapshots.append(snapshot['SnapshotId'])
              
              return {
                  'instanceId': instance_id,
                  'snapshots': snapshots
              }
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          FORENSICS_BUCKET: !Ref ForensicsBucketName
      Tags:
        - Key: Environment
          Value: !Ref Environment

  CollectLogsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-collect-logs
      Handler: index.handler
      Role: !GetAtt ForensicsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os
          from datetime import datetime, timedelta

          def handler(event, context):
              print("Collecting logs")
              instance_id = event['instanceId']
              
              logs = boto3.client('logs')
              s3 = boto3.client('s3')
              
              # Get log groups for the instance
              log_groups = logs.describe_log_groups()
              
              for group in log_groups['logGroups']:
                  group_name = group['logGroupName']
                  if instance_id in group_name:
                      # Get log streams
                      streams = logs.describe_log_streams(
                          logGroupName=group_name,
                          orderBy='LastEventTime',
                          descending=True
                      )
                      
                      for stream in streams['logStreams']:
                          # Get log events
                          events = logs.get_log_events(
                              logGroupName=group_name,
                              logStreamName=stream['logStreamName']
                          )
                          
                          # Save to S3
                          s3.put_object(
                              Bucket=os.environ['FORENSICS_BUCKET'],
                              Key=f'logs/{instance_id}/{group_name}/{stream["logStreamName"]}.json',
                              Body=str(events)
                          )
              
              return {
                  'instanceId': instance_id,
                  'status': 'Logs collected'
              }
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          FORENSICS_BUCKET: !Ref ForensicsBucketName
      Tags:
        - Key: Environment
          Value: !Ref Environment

  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-forensics-notification
      Handler: index.handler
      Role: !GetAtt ForensicsLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
              print("Sending notification")
              
              sns = boto3.client('sns')
              
              # Determine if success or failure
              is_failure = context.function_name.endswith('NotifyFailure')
              
              # Send notification
              sns.publish(
                  TopicArn=os.environ['SNS_TOPIC'],
                  Subject='Forensics Collection ' + ('Failed' if is_failure else 'Completed'),
                  Message=str(event)
              )
              
              return {
                  'status': 'Notification sent',
                  'event': event
              }
      Runtime: python3.9
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC: !ImportValue
            'Fn::Sub': ${Environment}-High-Priority-Topic
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # IAM Roles
  ForensicsStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-forensics-sfn-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ForensicsWorkflowPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt CollectMetadataFunction.Arn
                  - !GetAtt CreateMemorySnapshotFunction.Arn
                  - !GetAtt CreateDiskSnapshotFunction.Arn
                  - !GetAtt CollectLogsFunction.Arn
                  - !GetAtt NotificationFunction.Arn

  ForensicsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-forensics-lambda-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ForensicsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ForensicsBucketName}
                  - !Sub arn:aws:s3:::${ForensicsBucketName}/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DescribeVolumes
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - sns:Publish
                Resource: '*'

Outputs:
  StateMachineArn:
    Description: Forensics State Machine ARN
    Value: !Ref ForensicsStateMachine
    Export:
      Name: !Sub ${Environment}-Forensics-StateMachine

  CollectMetadataFunctionArn:
    Description: Collect Metadata Function ARN
    Value: !GetAtt CollectMetadataFunction.Arn
    Export:
      Name: !Sub ${Environment}-CollectMetadata-Function

  CreateMemorySnapshotFunctionArn:
    Description: Create Memory Snapshot Function ARN
    Value: !GetAtt CreateMemorySnapshotFunction.Arn
    Export:
      Name: !Sub ${Environment}-CreateMemorySnapshot-Function

  CreateDiskSnapshotFunctionArn:
    Description: Create Disk Snapshot Function ARN
    Value: !GetAtt CreateDiskSnapshotFunction.Arn
    Export:
      Name: !Sub ${Environment}-CreateDiskSnapshot-Function

  CollectLogsFunctionArn:
    Description: Collect Logs Function ARN
    Value: !GetAtt CollectLogsFunction.Arn
    Export:
      Name: !Sub ${Environment}-CollectLogs-Function 