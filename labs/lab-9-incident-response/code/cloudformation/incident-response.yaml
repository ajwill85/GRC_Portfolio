AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lab 9: Incident Response and Recovery - Incident Response Framework'

Parameters:
  Environment:
    Type: String
    Default: Lab9
    Description: Environment name for resource tagging
  EmailAddress:
    Type: String
    Description: Email address for incident notifications
  RetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain incident data
  ForensicsBucketName:
    Type: String
    Description: Name of the S3 bucket for forensics data

Resources:
  # SNS Topics for Notifications
  HighPriorityTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-high-priority
      DisplayName: High Priority Incidents
      Tags:
        - Key: Environment
          Value: !Ref Environment

  MediumPriorityTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-medium-priority
      DisplayName: Medium Priority Incidents
      Tags:
        - Key: Environment
          Value: !Ref Environment

  LowPriorityTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-low-priority
      DisplayName: Low Priority Incidents
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Email Subscriptions
  HighPrioritySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref HighPriorityTopic
      Protocol: email
      Endpoint: !Ref EmailAddress

  MediumPrioritySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref MediumPriorityTopic
      Protocol: email
      Endpoint: !Ref EmailAddress

  LowPrioritySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LowPriorityTopic
      Protocol: email
      Endpoint: !Ref EmailAddress

  # Forensics S3 Bucket
  ForensicsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref ForensicsBucketName
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref ForensicsKMSKey
      LoggingConfiguration:
        DestinationBucketName: !Ref ForensicsLogsBucket
        LogFilePrefix: forensics-logs/
      LifecycleConfiguration:
        Rules:
          - Id: RetentionRule
            Status: Enabled
            ExpirationInDays: !Ref RetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment

  ForensicsLogsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref ForensicsKMSKey
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # KMS Key for Encryption
  ForensicsKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for forensics data encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          # Removed the Forensics Role reference to break circular dependency

  ForensicsKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Environment}-forensics
      TargetKeyId: !Ref ForensicsKMSKey

  # IAM Roles
  ForensicsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-forensics-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Functions
  # Add role policy after creating role to avoid circular dependency
  ForensicsRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: 
      - ForensicsBucket
    Properties:
      PolicyName: ForensicsAccess
      Roles:
        - !Ref ForensicsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub ${ForensicsBucket.Arn}
              - !Sub ${ForensicsBucket.Arn}/*
          - Effect: Allow
            Action:
              - ec2:CreateSnapshot
              - ec2:DescribeSnapshots
              - ec2:DescribeInstances
              - ec2:DescribeVolumes
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt ForensicsKMSKey.Arn

  IncidentAnalysisFunction:
    Type: AWS::Lambda::Function
    DependsOn: ForensicsRolePolicy
    Properties:
      FunctionName: !Sub ${Environment}-incident-analysis
      Handler: index.handler
      Role: !GetAtt ForensicsRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def handler(event, context):
              print("Received event:", json.dumps(event))
              
              # Analyze the incident
              severity = analyze_severity(event)
              
              # Send notification based on severity
              sns = boto3.client('sns')
              if severity == 'HIGH':
                  topic_arn = os.environ['HIGH_PRIORITY_TOPIC']
              elif severity == 'MEDIUM':
                  topic_arn = os.environ['MEDIUM_PRIORITY_TOPIC']
              else:
                  topic_arn = os.environ['LOW_PRIORITY_TOPIC']
              
              # Send notification
              sns.publish(
                  TopicArn=topic_arn,
                  Subject='Security Incident Detected',
                  Message=json.dumps(event, indent=2)
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Incident analyzed and notification sent',
                      'severity': severity
                  })
              }
              
          def analyze_severity(event):
              # Add your severity analysis logic here
              return 'HIGH'  # Default to high for this example
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          HIGH_PRIORITY_TOPIC: !Ref HighPriorityTopic
          MEDIUM_PRIORITY_TOPIC: !Ref MediumPriorityTopic
          LOW_PRIORITY_TOPIC: !Ref LowPriorityTopic
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # EventBridge Rules
  SecurityHubRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${Environment}-securityhub-findings
      Description: Route Security Hub findings to analysis
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
      State: ENABLED
      Targets:
        - Arn: !GetAtt IncidentAnalysisFunction.Arn
          Id: AnalyzeSecurityHubFindings

  GuardDutyRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${Environment}-guardduty-findings
      Description: Route GuardDuty findings to analysis
      EventPattern:
        source:
          - aws.guardduty
        detail-type:
          - GuardDuty Finding
      State: ENABLED
      Targets:
        - Arn: !GetAtt IncidentAnalysisFunction.Arn
          Id: AnalyzeGuardDutyFindings

  # Lambda Permissions
  SecurityHubPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IncidentAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SecurityHubRule.Arn

  GuardDutyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IncidentAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GuardDutyRule.Arn

Outputs:
  ForensicsBucketName:
    Description: Forensics S3 Bucket Name
    Value: !Ref ForensicsBucket
    Export:
      Name: !Sub ${Environment}-Forensics-Bucket

  HighPriorityTopicArn:
    Description: High Priority SNS Topic ARN
    Value: !Ref HighPriorityTopic
    Export:
      Name: !Sub ${Environment}-High-Priority-Topic

  MediumPriorityTopicArn:
    Description: Medium Priority SNS Topic ARN
    Value: !Ref MediumPriorityTopic
    Export:
      Name: !Sub ${Environment}-Medium-Priority-Topic

  LowPriorityTopicArn:
    Description: Low Priority SNS Topic ARN
    Value: !Ref LowPriorityTopic
    Export:
      Name: !Sub ${Environment}-Low-Priority-Topic

  ForensicsRoleArn:
    Description: Forensics IAM Role ARN
    Value: !GetAtt ForensicsRole.Arn
    Export:
      Name: !Sub ${Environment}-Forensics-Role

  IncidentAnalysisFunctionArn:
    Description: Incident Analysis Lambda Function ARN
    Value: !GetAtt IncidentAnalysisFunction.Arn
    Export:
      Name: !Sub ${Environment}-Analysis-Function 