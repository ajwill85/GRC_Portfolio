# CloudFormation template for Lab 6: Data Security
# This template creates the core infrastructure for the data security lab
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Lab 6: Data Security'

Parameters:
  # Email address to receive security notifications
  NotificationEmail:
    Type: String
    Description: Email address to receive security notifications
    Default: your-email@example.com
  
  # Bucket name prefix for the S3 bucket
  BucketNamePrefix:
    Type: String
    Description: Prefix for the S3 bucket name (will be appended with account ID and region)
    Default: data-security-lab
  
  # Database name for the RDS instance
  DatabaseName:
    Type: String
    Description: Name for the RDS database
    Default: securitylab
  
  # Database username for the RDS instance
  DatabaseUsername:
    Type: String
    Description: Username for the RDS database
    Default: dbadmin
    MinLength: 1
    MaxLength: 16
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
  
  # Database password for the RDS instance
  DatabasePassword:
    Type: String
    Description: Password for the RDS database
    NoEcho: true
    MinLength: 8
    MaxLength: 41
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters

Resources:
  # KMS key for S3 encryption
  S3EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for S3 bucket encryption in Lab 6
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-policy-s3
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # KMS key alias for S3 encryption
  S3EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/data-security-s3-key
      TargetKeyId: !Ref S3EncryptionKey

  # KMS key for RDS encryption
  RDSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for RDS database encryption in Lab 6
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-policy-rds
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # KMS key alias for RDS encryption
  RDSEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/data-security-rds-key
      TargetKeyId: !Ref RDSEncryptionKey

  # KMS key for DynamoDB encryption
  DynamoDBEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for DynamoDB table encryption in Lab 6
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-policy-dynamodb
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # KMS key alias for DynamoDB encryption
  DynamoDBEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/data-security-dynamodb-key
      TargetKeyId: !Ref DynamoDBEncryptionKey

  # S3 bucket for data storage
  DataSecurityBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketNamePrefix}-${AWS::AccountId}-${AWS::Region}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3EncryptionKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: data-security-bucket-logs/
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6
        - Key: DataClassification
          Value: Confidential

  # S3 bucket policy to enforce HTTPS
  DataSecurityBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataSecurityBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyInsecureTransport
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${DataSecurityBucket}'
              - !Sub 'arn:aws:s3:::${DataSecurityBucket}/*'
            Condition:
              Bool:
                aws:SecureTransport: false

  # S3 bucket for access logging
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Purpose
          Value: DataSecurityLogging
        - Key: Lab
          Value: Lab6

  # VPC for secure database access
  DataSecurityVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: DataSecurityVPC
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Internet Gateway for the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: DataSecurityIGW
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DataSecurityVPC
      InternetGatewayId: !Ref InternetGateway

  # Public subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataSecurityVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DataSecurityPublicSubnet1
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Public subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataSecurityVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: DataSecurityPublicSubnet2
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Private subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataSecurityVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataSecurityPrivateSubnet1
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Private subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataSecurityVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataSecurityPrivateSubnet2
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Route table for public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DataSecurityVPC
      Tags:
        - Key: Name
          Value: DataSecurityPublicRT
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnet 1 with public route table
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate public subnet 2 with public route table
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Route table for private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DataSecurityVPC
      Tags:
        - Key: Name
          Value: DataSecurityPrivateRT
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # Associate private subnet 1 with private route table
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # Associate private subnet 2 with private route table
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # VPC Endpoint for S3
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${DataSecurityBucket}'
              - !Sub 'arn:aws:s3:::${DataSecurityBucket}/*'
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref DataSecurityVPC

  # Security group for RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref DataSecurityVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: DataSecurityRDSSG
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # RDS DB Subnet Group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: DataSecurityRDSSubnetGroup
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # RDS MySQL database
  RDSDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DatabaseName
      Engine: mysql
      EngineVersion: 8.0.28
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      KmsKeyId: !Ref RDSEncryptionKey
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: DataSecurityRDS
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6
        - Key: DataClassification
          Value: Restricted

  # DynamoDB table
  DataSecurityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DataSecurityTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref DynamoDBEncryptionKey
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6
        - Key: DataClassification
          Value: Sensitive

  # SNS Topic for security notifications
  SecurityNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Security Notifications
      TopicName: data-security-notifications

  # Email subscription to the SNS topic
  SecurityNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: !Ref NotificationEmail
      TopicArn: !Ref SecurityNotificationTopic

  # IAM role for Lambda functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      Policies:
        - PolicyName: KMSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                  - 'kms:GenerateDataKey'
                  - 'kms:DescribeKey'
                Resource:
                  - !GetAtt S3EncryptionKey.Arn
                  - !GetAtt RDSEncryptionKey.Arn
                  - !GetAtt DynamoDBEncryptionKey.Arn

  # CloudTrail for data access monitoring
  DataSecurityTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - CloudTrailBucketPolicy
    Properties:
      TrailName: DataSecurityTrail
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub 'arn:aws:s3:::${DataSecurityBucket}/'
          ReadWriteType: All
      Tags:
        - Key: Purpose
          Value: DataSecurity
        - Key: Lab
          Value: Lab6

  # S3 bucket for CloudTrail logs
  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Purpose
          Value: DataSecurityLogging
        - Key: Lab
          Value: Lab6

  # Bucket policy for CloudTrail bucket
  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}'
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

Outputs:
  # Output the S3 bucket name
  DataSecurityBucketName:
    Description: Name of the S3 bucket for data storage
    Value: !Ref DataSecurityBucket

  # Output the RDS endpoint
  RDSEndpoint:
    Description: Endpoint of the RDS database
    Value: !GetAtt RDSDatabase.Endpoint.Address

  # Output the DynamoDB table name
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref DataSecurityTable

  # Output the S3 KMS key ARN
  S3KMSKeyARN:
    Description: ARN of the KMS key for S3 encryption
    Value: !GetAtt S3EncryptionKey.Arn

  # Output the RDS KMS key ARN
  RDSKMSKeyARN:
    Description: ARN of the KMS key for RDS encryption
    Value: !GetAtt RDSEncryptionKey.Arn

  # Output the DynamoDB KMS key ARN
  DynamoDBKMSKeyARN:
    Description: ARN of the KMS key for DynamoDB encryption
    Value: !GetAtt DynamoDBEncryptionKey.Arn

  # Output the SNS topic ARN
  SNSTopicARN:
    Description: ARN of the SNS topic for security notifications
    Value: !Ref SecurityNotificationTopic

  # Output the Lambda execution role ARN
  LambdaRoleARN:
    Description: ARN of the IAM role for Lambda functions
    Value: !GetAtt LambdaExecutionRole.Arn

  # Output the CloudTrail name
  CloudTrailName:
    Description: Name of the CloudTrail trail
    Value: !Ref DataSecurityTrail